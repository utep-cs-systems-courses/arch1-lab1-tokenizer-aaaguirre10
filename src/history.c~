#include <stdio.h>
#include <stdlib.h>
#include "history.h"
#include "tokenizer.h"


/* Initialize the linked list to keep the history. */
List* init_history()
{
  List* init_list = (List*) malloc(sizeof(List));
  return init_list;
}

/* Add a history item to the end of the list.
   List* list - the linked list
   char* str - the string to store
*/
void add_history(List *list, char *str)
{
  Item *n_data = (Item*) malloc(sizeof(Item));
  Item *temp = list -> root;

  //find the len of str
  int item_Id = 0; 
  int str_len = 0;
  while(str[str_len] != '\0')
    str_len++;

  //set item to the a copy string
  n_data -> str = copy_str(str, str_len);
  n_data -> next = NULL;

  if(temp == NULL)
    {
      n_data -> id = item_Id;
      list -> root = n_data;
      return;
    }

  while(temp -> next != NULL)
    {
      item_Id++;
      temp = temp -> next;
    }

  item_Id++;
  n_data -> id = item_Id;
  temp -> next = n_data;
}


/* Retrieve the string stored in the node where Item->id == id.
   List* list - the linked list
   int id - the id of the Item to find */
char *get_history(List *list, int id)
{
  if(id < 0)
    {
      printf("Invalid ID. Please try again.");
      return "Error! Wrong ID";
    }

  Item *temp = list -> root;

  while(temp != NULL)
    {
      if(temp -> id == id)
	{
	  return temp -> str;
	}
      temp = temp -> next;
    }
  return "Error! Wrong ID";
}


/*Print the entire contents of the list. */
void print_history(List *list)
{
  Item *temp = list -> root;
  for(int i = 0; temp != NULL; i++)
    {
      printf("%s", temp ->str);
      temp = temp -> next;
    }
}

/*Free the history list and the strings it references. */
void free_history(List *list)
{
  Item *prev = list -> root;
  while(list -> root != NULL)
    {
      list -> root = list -> root -> next;
      free(prev -> str);
      free(prev);
      prev = list -> root;
    }
  free(list);
}
